---

# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023 Univention GmbH <info@univention.de>

include:
  - project: "univention/customers/dataport/upx/common-ci"
    ref: "v1.30.3"
    file:
      - "defaults/stages.yaml"
      - "defaults/nubus-workflow.yaml"
      - "jobs/lint-pre-commit.yaml"
      - "jobs/lint-commit-messages.yaml"
      - "jobs/semantic-release-env.yaml"
      - "jobs/container-build-external.yaml"
      - "jobs/package-and-publish-helm-charts-external.yaml"
      - "jobs/check-debian-updates.yaml"

  - project: "univention/dist/docker-services"
    ref: "master"
    file:
      - "dind.yml"

variables:
  # Used by pre-commit/gitlab-ci-linter
  GITLAB_PRIVATE_TOKEN: "${GITLAB_TOKEN}"
  GITLAB_PROJECT_ID: "${CI_PROJECT_ID}"
  GITLAB_SERVER: "https://git.knut.univention.de"
  DEBUG: "1"

lint-pre-commit:
  before_script:
    - cp .env.ldap-server.example .env.ldap-server

.build-matrix: &build-matrix
  - IMAGE_NAME:
      - "ldap-server"
      - "ldap-notifier"
      - "testrunner"

.publish-matrix: &publish-matrix
  - IMAGE_NAME:
      - "ldap-server"
      - "ldap-notifier"

container-build:
  parallel:
    matrix: *build-matrix

container-generate-sbom:
  parallel:
    matrix: *build-matrix

container-sign-external:
  parallel:
    matrix: *build-matrix

test-ldap-unit:
  stage: test
  extends: .dind
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  before_script:
    # The setup below would be easier with Docker Compose,
    # except injecting the image tag into the Compose file
    # would be very ugly.
    - docker network create testnet
    - docker volume create ldap-shared-data
    - docker volume create ldap-shared-run
    - docker image pull "${CI_REGISTRY_IMAGE}/ldap-server:${RELEASE_VERSION}"
    - docker image pull "${CI_REGISTRY_IMAGE}/testrunner:${RELEASE_VERSION}"
    - >-
      docker run
      --detach
      --name ldap-server
      --env LDAP_CN_ADMIN_PW=univention
      --network testnet
      --mount type=bind,source="${PWD}"/tests/base-defaults.conf,target=/etc/univention/base-defaults.conf,readonly
      --volume ldap-shared-data:/var/lib/univention-ldap/:rw
      --volume ldap-shared-run:/var/run/slapd/:rw
      ${CI_REGISTRY_IMAGE}/ldap-server:${RELEASE_VERSION}
    - echo "Checking container start-up logs ... "
    - sleep 10
    - docker logs ldap-server
    - echo "Waiting for slapd to come up ... "
    - >-
      docker run
      --rm
      --network testnet
      --volume "${PWD}":/app
      "${CI_REGISTRY_IMAGE}/testrunner:${RELEASE_VERSION}"
      pytest -k test_connection --capture=no --ldap-server=ldap-server:389
    - echo "LDAP server logs:"
    - docker logs ldap-server
  script:
    - >-
      docker run
      --rm
      --network testnet
      --volume "${PWD}":/app
      "${CI_REGISTRY_IMAGE}/testrunner:${RELEASE_VERSION}"
      pytest
      --ldap-server=ldap-server:389

push-image-external:
  parallel:
    matrix: *publish-matrix

container-sign-external:
  parallel:
    matrix: *publish-matrix

check-debian-updates:
  parallel:
    matrix: *publish-matrix
  variables:
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest"

package-helm-charts:
  variables:
    SKIP_UPDATE_HELM_VALUES: "true"
...
