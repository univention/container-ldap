#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pylint: disable=invalid-name
#
# Univention Config Registry
#
# Copyright 2020-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

"""Replacement for "univention-config-registry" get and filter"""

# included
import collections
import os
import io
import sys
import re


class Registry(collections.UserDict):  # pylint: disable=too-many-ancestors
    """Container-class to hold UCR items"""

    def add_file(self, filename):
        """Read the given UCR configuration file and add the settings to the
        registry."""
        try:
            with open(filename, mode="r", encoding="utf-8") as fd:
                for line in fd.readlines():
                    if ":" in line:
                        key, value = line.split(":", 1)
                        self[key] = value.strip()
        except FileNotFoundError:
            sys.stderr.write("Config file does not exist: " + filename + "\n")

    def get_int(self, key, default=None, value=None):
        """Get item from value-param, data-dict or default and
        convert it to an integer"""
        if value is None:
            value = self.data.get(key)
        return int(value) if value is not None else default

    def is_true(self, key, default=None, value=None):
        """Get item from value-param, data-dict or default and
        compare it to strings which stand for True"""
        if value is None:
            value = self.data.get(key)  # type: ignore
            if value is None:
                return default
        return value.lower() in (
            "yes",
            "true",
            "1",
            "enable",
            "enabled",
            "on",
        )

    def is_false(self, key, default=None, value=None):
        """Get item from value-param, data-dict or default and
        compare it to strings which stand for False"""
        if value is None:
            value = self.data.get(key)  # type: ignore
            if value is None:
                return default
        return value.lower() in (
            "no",
            "false",
            "0",
            "disable",
            "disabled",
            "off",
        )


config_registry = Registry()
# load the three layers of UCR which can be filled via ConfigMaps in K8s
config_registry.add_file("/etc/univention/base-defaults.conf")
config_registry.add_file("/etc/univention/base.conf")
config_registry.add_file("/etc/univention/base-forced.conf")

# TODO: Eventually admit that it's not
#       univention-config-registry anymore
WARNING_TEXT = """\
# Warning: This file is auto-generated and might be overwritten by
#          univention-config-registry.
#          Please edit the following file(s) instead:
# Warnung: Diese Datei wurde automatisch generiert und kann durch
#          univention-config-registry ueberschrieben werden.
#          Bitte bearbeiten Sie an Stelle dessen die folgende(n) Datei(en):
#
"""  # noqa: E101


# TODO: Check if full porting of warning_string() is needed
def warning_string():
    """Print out a warning message and all filenames from the template-dir"""
    string = WARNING_TEXT
    path = "/etc/univention/templates/files/etc/ldap/slapd.conf.d/"
    for file_name in sorted(os.listdir(path)):
        file_path = os.path.join(path, file_name)
        string += f"# \t{file_path}\n"
    return string


def resolve_variable(line):
    """Replaces a UCR-Template-variable with a value from UCR"""
    VARIABLE_PATTERN = re.compile("@%@([^@]+)@%@")
    return VARIABLE_PATTERN.sub(lambda x: config_registry[x.group(1)], line)


# TODO: Complete this
def custom_groupname(value):
    """Stub function for UCR-Templates"""
    return value


# TODO: Complete this
def custom_username(value):
    """Stub function for UCR-Templates"""
    return value


def run_filter(template, directory):
    """Parses UCR-Templates from stdin and calls exec on embedded code"""
    inside_section = False
    to_be_compiled = []

    buf = io.StringIO()
    for line in template.splitlines():
        line += "\n"
        # The original implementation is in:
        # base/univention-config-registry/python/
        # univention/config_registry/handler.py
        if line == "@%@UCRWARNING=# @%@\n":
            print(warning_string(), file=buf)
            continue

        if "@%@" in line:
            line = resolve_variable(line)

        if line == "@!@\n":
            if not inside_section:
                inside_section = True

            else:

                def print_wrapper(*_args, **kwargs):
                    kwargs.setdefault("file", buf)
                    print(*_args, **kwargs)

                inside_section = False
                exec(  # pylint: disable=exec-used
                    "".join(to_be_compiled),
                    {
                        "print": print_wrapper,
                        "custom_groupname": custom_groupname,
                        "custom_username": custom_username,
                        "configRegistry": directory,
                        "run_filter": run_filter,
                    },
                )
                print("", file=buf)
                to_be_compiled = []

        elif inside_section:
            # Workaround for some import that doesn't do much anyway
            # TODO: Complete this, if needed
            if line in (
                "from univention.config_registry.handler import run_filter\n",
                "from univention.lib.misc import custom_groupname\n",
                ("from univention.lib.misc import " "custom_username, custom_groupname\n"),
            ):
                continue
            to_be_compiled += line

        else:
            print(line, file=buf, end="")

    # This function must return a decodable byte array
    # in order to maintain compatibilty with the
    # 25univention-ldap-server_local-schema fragment
    # which invokes this function and tries to decode the result
    return buf.getvalue().encode("UTF-8")


def main():
    """main - what else, pylint?"""
    print(run_filter(sys.stdin.read(), config_registry).decode("UTF-8"))


if __name__ == "__main__":
    main()
