# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH

---
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ printf "%s-proxy" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" . ) | nindent 4 }}
  {{- include "nubus-common.annotations.render" ( dict
    "values" ( list .Values.additionalAnnotations )
    "context" . )
    | nindent 2 }}
spec:
  replicas: {{ include "ldap-server.replicaCountProxy" . }}
  strategy: {{- include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" .) | nindent 4 }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      ldap-server-type: proxy
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/configmap-proxy: {{ include (print .Template.BasePath "/configmap-proxy.yaml") . | sha256sum }}
        {{- if .Values.podAnnotationsProxy }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotationsProxy "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
        ldap-server-type: proxy
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinityProxy }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinityProxy "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        - name: "univention-compatibility"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /target/usr/share/univention-ldap /target/etc/ldap /target/etc/univention
              cp -a /usr/share/univention-ldap/* /target/usr/share/univention-ldap/
              cp -a /etc/ldap/* /target/etc/ldap/
              cp -a /etc/univention/* /target/etc/univention/
          volumeMounts:
            - name: usr-share-univention-ldap-volume
              mountPath: /target/usr/share/univention-ldap
            - name: etc-ldap-volume
              mountPath: /target/etc/ldap
            - name: etc-univention-volume
              mountPath: /target/etc/univention
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesProxy .Values.resources) "context" .) | nindent 12 }}
        - name: "load-internal-plugins"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /target/ldap-schema /target/ldap-acls
              cp -av /var/lib/univention-ldap-local/local-schema/* /target/ldap-schema/
              cp -av /etc/univention/templates/files/etc/ldap/slapd.conf.d/* /target/ldap-acls/
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesProxy .Values.resources) "context" .) | nindent 12 }}
        {{- $systemExtensions := default (list) (coalesce .Values.systemExtensions .Values.global.systemExtensions) -}}
        {{- $extensions := default (list) (coalesce .Values.extensions .Values.global.extensions) -}}
        {{- range (concat $systemExtensions $extensions) }}
        - name: "load-{{ .name }}-extension"
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .image.registry $.Values.global.imageRegistry }}/{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ coalesce .image.pullPolicy $.Values.global.imagePullPolicy | quote }}
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce $.Values.resourcesProxy $.Values.resources) "context" $) | nindent 12 }}
        {{- end }}
        - name: "wait-for-secondary"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
            - configMapRef:
                name: {{ printf "%s-proxy" (include "common.names.fullname" .) }}
          env:
            - name: LDAP_CN_ADMIN_PW
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "defaultNameSuffix" "admin" "context" .) }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "key" "password" "context" .) }}
          command:
            - bash
            - -c
            - '/scripts-proxy/wait-for-secondary.sh'
          volumeMounts:
            - name: proxy-scripts-volume
              mountPath: /scripts-proxy
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce $.Values.resourcesProxy $.Values.resources) "context" $) | nindent 12 }}
      {{- if .Values.waitForDependency.enabled }}
        - name: "wait-for-saml-metadata"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.waitForDependency.image.registry .Values.global.imageRegistry }}/{{ .Values.waitForDependency.image.repository }}:{{ .Values.waitForDependency.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.waitForDependency.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - "/bin/bash"
            - "/scripts/wait-for-saml-metadata.sh"
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          volumeMounts:
            - name: scripts-volume
              mountPath: /scripts
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce $.Values.resourcesProxy $.Values.resources) "context" $) | nindent 12 }}
      {{- end }}
      containers:
        - name: "main"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
            - configMapRef:
                name: {{ printf "%s-proxy" (include "common.names.fullname" .) }}
          env:
            - name: LDAP_CN_ADMIN_PW
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "defaultNameSuffix" "admin" "context" .) }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "key" "password" "context" .) }}
          {{- with .Values.extraEnvVars }}
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.livenessProbe "context" .) | nindent 12 }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.readinessProbe "context" .) | nindent 12 }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.startupProbe "context" .) | nindent 12 }}
          ports:
            {{- range $key, $value := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.containerPort }}
              protocol: {{ $value.protocol }}
            {{- end }}
          {{- if or .Values.resources .Values.resourcesProxy }}
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesProxy .Values.resources) "context" .) | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" .) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: usr-share-univention-ldap-volume
              mountPath: /usr/share/univention-ldap
            - name: usr-share-oidc-volume
              mountPath: /usr/share/oidc
            - name: usr-share-saml-volume
              mountPath: /usr/share/saml
            - name: etc-ldap-volume
              mountPath: /etc/ldap
            - name: etc-univention-volume
              mountPath: /etc/univention
            - name: proxy-config-templates-volume
              mountPath: /config/templates
            - name: proxy-scripts-volume
              mountPath: /entrypoint.d/90-generate-slapd-conf.sh
              subPath: generate-slapd.conf.sh
            - name: plugin-targets
              mountPath: /var/lib/univention-ldap-local/local-schema
              subPath: ldap-schema
              readOnly: true
            - name: plugin-targets
              mountPath: /etc/univention/templates/files/etc/ldap/slapd.conf.d
              subPath: ldap-acls
              {{/*
                Can't be made read-only since
                40-self-service-acl.sh writes to it
              */}}
              readOnly: false
            - name: var-run-volume
              mountPath: /var/run/slapd
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
            - name: "data-volume"
              mountPath: /var/lib/univention-ldap
            {{- if .Values.ldapServer.tls.enabled }}
            - name: {{ printf "%s-tls-volume" (include "common.names.fullname" .) }}
              mountPath: /certificates
            {{- end }}
            {{- if and .Values.ldapServer.generateDHparam .Values.ldapServer.tls.enabled }}
            - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
              mountPath: /dhparam
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
      volumes:
        - name: "data-volume"
          emptyDir: {}
        - name: "var-run-volume"
          emptyDir: {}
        - name: "usr-share-univention-ldap-volume"
          emptyDir: {}
        - name: "usr-share-oidc-volume"
          emptyDir: {}
        - name: "usr-share-saml-volume"
          emptyDir: {}
        - name: "etc-ldap-volume"
          emptyDir: {}
        - name: "etc-univention-volume"
          emptyDir: {}
        - name: "proxy-scripts-volume"
          configMap:
            name: {{ printf "%s-proxy-scripts" (include "common.names.fullname" .) }}
            defaultMode: 0555
        - name: "proxy-config-templates-volume"
          configMap:
            name: {{ printf "%s-proxy-config-templates" (include "common.names.fullname" .) }}
        - name: "scripts-volume"
          configMap:
            name: {{ printf "%s-scripts" (include "common.names.fullname" .) }}
            defaultMode: 0555
        - name: "plugin-targets"
          emptyDir: {}
        - name: "config-map-ucr"
          configMap:
            name: {{ include "ldap-server.configMapUcr" . | quote }}
        {{- if .Values.ldapServer.tls.enabled }}
        - name: {{ printf "%s-tls-volume" (include "common.names.fullname" .) }}
          secret:
            defaultMode: 0400
            secretName: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "defaultNameSuffix" "tls" "context" .) | quote }}
            items:
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "key" "ca.crt" "context" .) | quote }}
                path: ca.crt
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "key" "tls.crt" "context" .) | quote }}
                path: tls.crt
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "key" "tls.key" "context" .) | quote }}
                path: tls.key
        {{- if .Values.ldapServer.generateDHparam }}
        - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
          emptyDir: {}
        {{- else }}
        - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
          secret:
            defaultMode: 0400
            secretName: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.tls.dhparam.existingSecret "defaultNameSuffix" "tls-dhparams" "context" .) | quote }}
            items:
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.dhparam.existingSecret "key" "dhparam.pem" "context" .) | quote }}
                path: dhparam.pem
        {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
...
