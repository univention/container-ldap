{{/*
SPDX-FileCopyrightText: 2024-2025 Univention GmbH
SPDX-License-Identifier: AGPL-3.0-only
*/}}
---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: "StatefulSet"
metadata:
  name: {{ printf "%s-secondary" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
    ldap-server-type: secondary
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ printf "%s-secondary" (include "common.names.fullname" .) }}
  replicas: {{ include "ldap-server.replicaCountSecondary" . }}
  podManagementPolicy: {{ .Values.podManagementPolicy | default "OrderedReady" }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  {{/*
    TODO-0001
    As per decision two volumes, shared-data and shared-run will be mounted by both the ldap-server and the ldap-notifier
    https://git.knut.univention.de/univention/customers/dataport/upx/container-ldap/-/blob/main/docs/decisions/0002-use-multiple-pods.md?ref_type=heads

    Change the name to the following to dissolve this coupling.
    name: {{ printf "data-%s" (include "common.names.fullname" .) }}
  */}}
    - metadata:
        name: "shared-data"
      spec:
        accessModes: [{{ range .Values.persistence.accessModes }}{{ . | quote }}{{ end }}]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
    - metadata:
        name: "shared-run"
      spec:
        accessModes: [{{ range .Values.persistence.accessModes }}{{ . | quote }}{{ end }}]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.ldapServer.legacy.sharedRunSize | quote }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      ldap-server-type: secondary
  updateStrategy: {{ include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" .) | nindent 4 }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/configmap-secondary: {{ include (print .Template.BasePath "/configmap-secondary.yaml") . | sha256sum }}
        {{- if .Values.podAnnotationsSecondary }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotationsSecondary "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
        ldap-server-type: secondary
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinitySecondary }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinitySecondary "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        - name: "univention-compatibility"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /target/usr/share/univention-ldap /target/etc/ldap /target/etc/univention
              cp -a /usr/share/univention-ldap/* /target/usr/share/univention-ldap/
              cp -a /etc/ldap/* /target/etc/ldap/
              cp -a /etc/univention/* /target/etc/univention/
          volumeMounts:
            - name: usr-share-univention-ldap-volume
              mountPath: /target/usr/share/univention-ldap
            - name: etc-ldap-volume
              mountPath: /target/etc/ldap
            - name: etc-univention-volume
              mountPath: /target/etc/univention
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesSecondary .Values.resources) "context" .) | nindent 12 }}
      {{- if and .Values.ldapServer.generateDHparam .Values.ldapServer.tls.enabled }}
        - name: "init-dh"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.dhInitContainer.image.registry .Values.global.imageRegistry }}/{{ .Values.dhInitContainer.image.repository }}:{{ .Values.dhInitContainer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.dhInitContainer.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          args:
            - dhparam
            - -out
            - /dhparam/dhparam.pem
            - "2048"
          volumeMounts:
            - name: '{{ include "common.names.fullname" . }}-dh-volume'
              mountPath: /dhparam
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesSecondary .Values.resources) "context" .) | nindent 12 }}
      {{- end }}
        - name: "load-internal-plugins"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /target/ldap-schema
              mkdir -p /target/ldap-acls
              cp -av /var/lib/univention-ldap-local/local-schema/* /target/ldap-schema
              cp -av /etc/univention/templates/files/etc/ldap/slapd.conf.d/* /target/ldap-acls
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesSecondary .Values.resources) "context" .) | nindent 12 }}
        {{- $systemExtensions := default (list) (coalesce .Values.systemExtensions .Values.global.systemExtensions) -}}
        {{- $extensions := default (list) (coalesce .Values.extensions .Values.global.extensions) -}}
        {{- range (concat $systemExtensions $extensions) }}
        - name: "load-{{ .name }}-extension"
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .image.registry $.Values.global.imageRegistry }}/{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ coalesce .image.imagePullPolicy $.Values.global.imagePullPolicy | quote }}
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce $.Values.resourcesSecondary $.Values.resources) "context" $) | nindent 12 }}
        {{- end }}
      {{- if .Values.waitForDependency.enabled }}
        - name: "wait-for-saml-metadata"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.waitForDependency.image.registry .Values.global.imageRegistry }}/{{ .Values.waitForDependency.image.repository }}:{{ .Values.waitForDependency.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.waitForDependency.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - "/bin/bash"
            - "/scripts/wait-for-saml-metadata.sh"
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          volumeMounts:
            - name: scripts-volume
              mountPath: /scripts
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesSecondary .Values.resources) "context" .) | nindent 12 }}
      {{- end }}
        - name: "wait-for-primary"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
            - configMapRef:
                name: {{ printf "%s-secondary" (include "common.names.fullname" .) }}
          env:
            - name: SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "defaultNameSuffix" "credentials" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "key" "password") | quote }}
            - name: LDAP_CN_ADMIN_PW
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "defaultNameSuffix" "credentials" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "key" "password") | quote }}
          command:
            - bash
            - -c
            - '/scripts-secondary/wait-for-primary.sh'
          volumeMounts:
            - name: secondary-scripts-volume
              mountPath: /scripts-secondary
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesSecondary .Values.resources) "context" .) | nindent 12 }}
      containers:
        - name: "openldap"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.ldapServer.image.registry .Values.global.imageRegistry }}/{{ .Values.ldapServer.image.repository }}:{{ .Values.ldapServer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.ldapServer.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
            - configMapRef:
                name: {{ printf "%s-secondary" (include "common.names.fullname" .) }}
          env:
            - name: SYNC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "defaultNameSuffix" "credentials" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "key" "password") | quote }}
            - name: LDAP_CN_ADMIN_PW
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "defaultNameSuffix" "credentials" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.auth.existingSecret "key" "password") | quote }}
          {{- with .Values.extraEnvVars }}
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.livenessProbe "context" .) | nindent 12 }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.readinessProbe "context" .) | nindent 12 }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.startupProbe "context" .) | nindent 12 }}
          ports:
            {{- range $key, $value := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.containerPort }}
              protocol: {{ $value.protocol }}
            {{- end }}
          resources: {{- include "common.tplvalues.render" (dict "value" (coalesce .Values.resourcesSecondary .Values.resources) "context" .) | nindent 12 }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" .) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: usr-share-univention-ldap-volume
              mountPath: /usr/share/univention-ldap
            - name: usr-share-saml-volume
              mountPath: /usr/share/saml
            - name: etc-ldap-volume
              mountPath: /etc/ldap
            - name: etc-univention-volume
              mountPath: /etc/univention
            - name: secondary-config-templates-volume
              mountPath: /config/templates
            - name: secondary-scripts-volume
              mountPath: /entrypoint.d/90-append-slapd-conf.sh
              subPath: append-slapd.conf.sh
            - name: scripts-volume
              mountPath: /entrypoint.d/91-init-internal-database.sh
              subPath: init-internal-database.sh
            - name: plugin-targets
              mountPath: /var/lib/univention-ldap-local/local-schema
              subPath: ldap-schema
              readOnly: true
            - name: plugin-targets
              mountPath: /etc/univention/templates/files/etc/ldap/slapd.conf.d
              subPath: ldap-acls
              {{/*
                Cannot be made read-only since
                40-self-service-acl.sh writes to it
              */}}
              readOnly: false
              {{/*
                TODO-0002
                When legacy handling is disabled, use an emptyDir
                - name: var-run-volume
                  mountPath: /var/run/slapd
              */}}
            - name: shared-run
              mountPath: /var/run/slapd
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
            {{- if .Values.persistence.enabled }}
            {{/*
              TODO-0001 (also see above)
              When legacy share volume between ldap-server and ldap-notifier has been resolved, use a pvc exclusive to ldap-server
              - name: {{ printf "data-%s" (include "common.names.fullname" .) }}
            */}}
            - name: "shared-data"
              mountPath: /var/lib/univention-ldap
            {{- end }}
            {{- if .Values.ldapServer.tls.enabled }}
            - name: {{ printf "%s-tls-volume" (include "common.names.fullname" .) }}
              mountPath: /certificates
            {{- end }}
            {{- if and .Values.ldapServer.generateDHparam .Values.ldapServer.tls.enabled }}
            - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
              mountPath: /dhparam
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
      volumes:
        - name: "usr-share-univention-ldap-volume"
          emptyDir: {}
        - name: "usr-share-saml-volume"
          emptyDir: {}
        - name: "etc-ldap-volume"
          emptyDir: {}
        - name: "etc-univention-volume"
          emptyDir: {}
        - name: "secondary-scripts-volume"
          configMap:
            name: {{ printf "%s-secondary-scripts" (include "common.names.fullname" .) }}
            defaultMode: 0555
        - name: "secondary-config-templates-volume"
          configMap:
            name: {{ printf "%s-secondary-config-templates" (include "common.names.fullname" .) }}
        - name: "scripts-volume"
          configMap:
            name: {{ printf "%s-scripts" (include "common.names.fullname" .) }}
            defaultMode: 0555
        - name: "plugin-targets"
          emptyDir: {}
        - name: "config-map-ucr"
          configMap:
            name: {{ include "ldap-server.configMapUcr" . | quote }}
          {{/*
              TODO-0002 (also see above)
              When legacy handling is disabled, use an emptyDir
              - name: "var-run-volume"
                emptyDir: {}
          */}}
        {{- if .Values.ldapServer.tls.enabled }}
        - name: {{ printf "%s-tls-volume" (include "common.names.fullname" .) }}
          secret:
            defaultMode: 0400
            secretName: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "defaultNameSuffix" "tls" "context" .) | quote }}
            items:
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "key" "ca.crt") | quote }}
                path: ca.crt
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "key" "tls.crt") | quote }}
                path: tls.crt
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.existingSecret "key" "tls.key") | quote }}
                path: tls.key
        {{- if .Values.ldapServer.generateDHparam }}
        - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
          emptyDir: {}
        {{- else }}
        - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
          secret:
            defaultMode: 0400
            secretName: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldapServer.tls.dhparam.existingSecret "defaultNameSuffix" "tls-dhparams" "context" .) | quote }}
            items:
              - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldapServer.tls.dhparam.existingSecret "key" "dhparam.pem") | quote }}
                path: dhparam.pem        {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
...
