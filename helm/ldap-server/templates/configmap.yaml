{{/*
SPDX-FileCopyrightText: 2024 Univention GmbH
SPDX-License-Identifier: AGPL-3.0-only
*/}}
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: "{{ include "common.names.fullname" . }}"
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  DOMAIN_NAME: {{ .Values.ldapServer.config.domainName | required ".Values.ldapServer.config.domainName is required" | quote }}
  LDAP_BASE_DN: {{ .Values.ldapServer.config.ldapBaseDn | required ".Values.ldapServer.config.ldapBaseDn is required" | quote }}
  LOG_LEVEL: {{ .Values.ldapServer.config.logLevel | required ".Values.ldapServer.config.logLevel is required" | quote }}
  SAML_METADATA_URL: {{ .Values.ldapServer.config.samlMetadataUrl | required ".Values.ldapServer.config.samlMetadataUrl is required" | quote }}
  SAML_METADATA_URL_INTERNAL: {{ .Values.ldapServer.config.samlMetadataUrlInternal | required ".Values.ldapServer.config.samlMetadataUrlInternal is required" | quote }}
  SERVICE_PROVIDERS: {{ .Values.ldapServer.config.samlServiceProviders | required ".Values.ldapServer.config.samlServiceProviders is required" | quote }}
  {{- if .Values.ldapServer.tls.enabled }}
  TLS_MODE: "secure"
  CA_CERT_FILE: "{{ .Values.ldapServer.tls.caCertificateFile }}"
  CERT_PEM_FILE: "{{ .Values.ldapServer.tls.certificateFile }}"
  PRIVATE_KEY_FILE: "{{ .Values.ldapServer.tls.certificateKeyFile }}"
  DH_PARAM_FILE: "/dhparam/dhparam.pem"
  {{- if .Values.ldapServer.tls.TLSCipherSuite }}
  LDAP_TLS_CIPHERSUITE: {{ .Values.ldapServer.tls.TLSCipherSuite | quote }}
  {{- end }}
  {{- else }}
  TLS_MODE: "off"
  {{- end }}
...
{{- if .Values.waitForDependency.enabled }}
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-scripts" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  wait-for-saml-metadata.sh: |
    #!/bin/bash

    set -euxo pipefail

    # we have no UCR in this container, so just grep the SAML URL from the config file
    UCR_FILES="/etc/univention/base-defaults.conf /etc/univention/base.conf /etc/univention/base-forced.conf"
    SAML_METADATA_URL=$(grep --no-filename '^umc/saml/idp-server:' $UCR_FILES 2>/dev/null | cut --delimiter=':' --fields='2-' | tail --lines=1 | xargs || true)
    SAML_METADATA_URL_INTERNAL=$(grep --no-filename '^umc/saml/idp-server-internal:' $UCR_FILES 2>/dev/null | cut --delimiter=':' --fields='2-' | tail --lines=1 | xargs || true)

    DOWNLOAD_URL=${SAML_METADATA_URL_INTERNAL:-${SAML_METADATA_URL}}
    echo "Checking endpoint ${DOWNLOAD_URL}."

    SECONDS=0
    TIMEOUT=120

    while ! curl -o /dev/null -sf "${DOWNLOAD_URL}"; do
      echo "Checking if the SAML Metadata can be downloaded from keycloak ..."
      sleep 2

      if (($SECONDS > $TIMEOUT)); then
        echo "Giving up after $TIMEOUT seconds"
        exit 1
      fi
    done

    echo "Success, the SAML Metadata is available."
...
{{- end }}
