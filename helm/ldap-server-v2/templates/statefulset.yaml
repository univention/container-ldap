{{/*
SPDX-FileCopyrightText: 2023 Bundesministerium des Innern und für Heimat, PG ZenDiS "Projektgruppe für Aufbau ZenDiS"
SPDX-License-Identifier: Apache-2.0
*/}}
---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: "StatefulSet"
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "common.names.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: {{ .Values.podManagementPolicy | default "OrderedReady" }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  {{/*
    ToDo-0001
    As per decision two volumes, shared-data and shared-run will be mounted by both the ldap-server and the ldap-notifier
    https://git.knut.univention.de/univention/customers/dataport/upx/container-ldap/-/blob/main/docs/decisions/0002-use-multiple-pods.md?ref_type=heads

    Change the name to the following to dissolve this coupling.
    name: {{ printf "data-%s" (include "common.names.fullname" .) }}
  */}}
    - metadata:
        name: "shared-data"
      spec:
        accessModes: [{{ range .Values.persistence.accessModes }}{{ . | quote }}{{ end }}]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
    - metadata:
        name: "shared-run"
      spec:
        accessModes: [{{ range .Values.persistence.accessModes }}{{ . | quote }}{{ end }}]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.ldapServer.legacy.sharedRunSize | quote }}
    - metadata:
        name: {{ printf "usr-share-saml-%s" (include "common.names.fullname" .) }}
      spec:
        accessModes: [{{ range .Values.persistence.accessModes }}{{ . | quote }}{{ end }}]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: "100Mi"
  {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  updateStrategy: {{ include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" .) | nindent 4 }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
    spec:
      {{- if or .Values.ldapServer.imagePullSecrets .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.ldapServer.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        - name: "univention-compatibility"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.images.ldapServer.registry .Values.global.imageRegistry }}/{{ .Values.images.ldapServer.repository }}:{{ .Values.images.ldapServer.tag }}"
          imagePullPolicy: {{ coalesce .Values.images.ldapServer.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - 'cp -a /usr/share/univention-ldap/* /target/usr/share/univention-ldap/; cp -a /etc/ldap/* /target/etc/ldap/; cp -a /etc/univention/* /target/etc/univention/'
          volumeMounts:
            - name: usr-share-univention-ldap-volume
              mountPath: /target/usr/share/univention-ldap
            - name: etc-ldap-volume
              mountPath: /target/etc/ldap
            - name: etc-univention-volume
              mountPath: /target/etc/univention
      {{- if .Values.ldapServer.generateDHparam }}
        - name: "init-dh"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.images.dhInitContainer.registry .Values.global.imageRegistry }}/{{ .Values.images.dhInitContainer.repository }}:{{ .Values.images.dhInitContainer.tag }}"
          imagePullPolicy: {{ coalesce .Values.images.dhInitContainer.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          args:
            - dhparam
            - -out
            - /dhparam/dhparam.pem
            - 2048
          volumeMounts:
            - name: '{{ include "common.names.fullname" . }}-dh-volume'
              mountPath: /dhparam
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
      {{- end }}
      containers:
        - name: "openldap"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.images.ldapServer.registry .Values.global.imageRegistry }}/{{ .Values.images.ldapServer.repository }}:{{ .Values.images.ldapServer.tag }}"
          imagePullPolicy: {{ coalesce .Values.images.ldapServer.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          env:
            - name: LDAP_CN_ADMIN_PW
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ldapServer.credentialSecret.name | default (printf "%s-credentials" (include "common.names.fullname" . )) | quote }}
                  key: {{ .Values.ldapServer.credentialSecret.adminPasswordKey | default "adminPassword" | quote }}
          {{- with .Values.extraEnvVars }}
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          livenessProbe:
            tcpSocket:
              port: 389
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          readinessProbe:
            tcpSocket:
              port: 389
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          startupProbe:
            tcpSocket:
              port: 389
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
          ports:
            {{- range $key, $value := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.containerPort }}
              protocol: {{ $value.protocol }}
            {{- end }}
          {{- if .Values.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" .) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: usr-share-univention-ldap-volume
              mountPath: /usr/share/univention-ldap
            - name: usr-share-saml-volume
              mountPath: /usr/share/saml
            - name: etc-ldap-volume
              mountPath: /etc/ldap
            - name: etc-univention-volume
              mountPath: /etc/univention
              {{/*
                ToDo-0002
                When legacy handling is disabled, use an emptyDir
                - name: var-run-volume
                  mountPath: /var/run/slapd
              */}}
            - name: shared-run
              mountPath: /var/run/slapd
            {{- if .Values.persistence.enabled }}
            {{/*
              ToDo-0001 (also see above)
              When legacy share volume between ldap-server and ldap-notifier has been resolved, use a pvc exclusive to ldap-server
              - name: {{ printf "data-%s" (include "common.names.fullname" .) }}
            */}}
            - name: "shared-data"
              mountPath: /var/lib/univention-ldap
            {{- end }}
            {{- if .Values.ldapServer.tls.enabled }}
            - name: {{ printf "%s-tls-volume" (include "common.names.fullname" .) }}
              mountPath: /certificates
            {{- end }}
            {{- if .Values.ldapServer.generateDHparam }}
            - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
              mountPath: /dhparam
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
      volumes:
        - name: "usr-share-univention-ldap-volume"
          emptyDir: {}
        - name: "usr-share-saml-volume"
          emptyDir: {}
        - name: "etc-ldap-volume"
          emptyDir: {}
        - name: "etc-univention-volume"
          emptyDir: {}
          {{/*
              ToDo-0002 (also see above)
              When legacy handling is disabled, use an emptyDir
              - name: "var-run-volume"
                emptyDir: {}
          */}}
        {{- if .Values.ldapServer.tls.enabled }}
        - name: {{ printf "%s-tls-volume" (include "common.names.fullname" .) }}
          secret:
            defaultMode: 0400
            secretName: {{ .Values.ldapServer.tls.certificateSecret.name | default (printf "%s-tls" (include "common.names.fullname" . )) | quote }}
        {{- end }}
        {{- if .Values.ldapServer.generateDHparam }}
        - name: {{ printf "%s-dh-volume" (include "common.names.fullname" .) }}
          secret:
            defaultMode: 0400
            secretName: {{ .Values.ldapServer.dhparamSecret.name | quote }}
        {{- else }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
...
