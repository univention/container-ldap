@startuml LDIF Producer Activity Diagram
start

:socketserver = slapdsock.service.SlapdSockServer()
:handler = slapdsocklistener.LDAPHandler(ReasonableSlapdSockHandler(SlapdSockHandler(BaseRequestHandler)));

:Start event loop;
:Connect to NATS;
:Read jornal and send pending old messages to NATS;

fork

partition "Send Messages to NATS" {
repeat
:get message from
`outgoing_queue`;
:send message to NATS
into LDIF_PRODUCER queue;
:remove message from journal;
repeat while ( no SIGINT / SIGTERM )
}

fork again
    partition "SocketServer\nMain Thread" {
        :socketserver.serve_forever();
    fork
        repeat
            :listen for messages in the socket;
            :slapdsock.service
            .SlapdSockServer.handle_request()
            ====
            handle_request simply puts
            incoming socket messages into
            the `requests` python queue
            so that multiple threads
            can work on them.;

        repeat while ( no SIGINT / SIGTERM )

    fork again

        partition "SocketServer\nWorker Thread" {
            repeat
                :get message from queue;
                :handler.handle(message)
                ====
                Execute SlapdSockHandler.handle
                to parse the socket message
                and determine the ldap operation;
                switch (ldap_operation_type)
                case ( RESULT )
                    partition "LDAPHandler.\ndo_result()" {
                        :write message to journal;
                        :put message into `outgoing_queue`;
                        :release back-pressure
                        by removing an object from
                        the `backpressure_queue`;
                    }
                case ( DELETE / MODIFY / MODRDN )
                    :LDAPHandler.
                    do_add()
                    do_delete()
                    do_modify()
                    do_modrdn()
                    ====
                    add object to
                    `backpressure_queue`;
                case ( Everything else )
                    :LDAPHandler.
                    do_bind()
                    do_search()
                    ...
                    ====
                    do nothing;
                endswitch
            repeat while ( no SIGINT / SIGTERM )
        }
    fork again
        partition "SocketServer\nWorker  Thread" {
        }

end fork

stop

@enduml
