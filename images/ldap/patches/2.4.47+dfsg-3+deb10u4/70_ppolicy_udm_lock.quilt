Make the ppolicy overlay call udm to lock an account (Bug #31907)

Index: openldap-2.4.45+dfsg/servers/slapd/overlays/Makefile.in
===================================================================
--- openldap-2.4.45+dfsg.orig/servers/slapd/overlays/Makefile.in
+++ openldap-2.4.45+dfsg/servers/slapd/overlays/Makefile.in
@@ -96,7 +96,7 @@ collect.la : collect.lo
 	$(LTLINK_MOD) -module -o $@ collect.lo version.lo $(LINK_LIBS)
 
 ppolicy.la : ppolicy.lo
-	$(LTLINK_MOD) -module -o $@ ppolicy.lo version.lo $(LINK_LIBS) $(MODULES_LIBS)
+	$(LTLINK_MOD) -module -o $@ ppolicy.lo version.lo $(LINK_LIBS) $(MODULES_LIBS) -lpython2.7
 
 refint.la : refint.lo
 	$(LTLINK_MOD) -module -o $@ refint.lo version.lo $(LINK_LIBS)
Index: openldap-2.4.45+dfsg/servers/slapd/overlays/ppolicy.c
===================================================================
--- openldap-2.4.45+dfsg.orig/servers/slapd/overlays/ppolicy.c
+++ openldap-2.4.45+dfsg/servers/slapd/overlays/ppolicy.c
@@ -49,6 +49,9 @@
 #define PPOLICY_DEFAULT_MAXRECORDED_FAILURE	5
 #endif
 
+#include <python2.7/Python.h>
+static PyObject *lib_account = NULL;
+
 /* Per-instance configuration information */
 typedef struct pp_info {
 	struct berval def_policy;	/* DN of default policy subentry */
@@ -308,6 +311,67 @@ ppolicy_cf_default( ConfigArgs *c )
 	return rc;
 }
 
+static int
+udm_lock_account(Entry *e, struct berval *lock_timestamp)
+{
+	int ucs_error = -1;
+
+	PyObject *args = NULL, *call = NULL;
+	PyObject *errobj = NULL, *errdata = NULL, *errtraceback = NULL, *pystring = NULL;
+	PyObject *lib_account_lock = NULL;
+
+	Debug( LDAP_DEBUG_TRACE,
+		"ppolicy udm_lock_account start: %s\n", e->e_name.bv_val, 0, 0 );
+
+	// lib_account = PyImport_ImportModule("univention.lib.account");
+	if (!lib_account) {
+		Debug( LDAP_DEBUG_ANY,
+			"ppolicy udm_lock_account error: univention.lib.account not loaded\n", 0, 0, 0 );
+		goto ucs_done;
+	}
+
+	lib_account_lock = PyObject_GetAttrString(lib_account, "lock");
+	if (!lib_account_lock) {
+		Debug( LDAP_DEBUG_ANY,
+			"ppolicy udm_lock_account error: lib_account_lock is unset\n", 0, 0, 0 );
+		goto ucs_done;
+	}
+
+	args = Py_BuildValue("ss",  e->e_name.bv_val, lock_timestamp->bv_val);
+	if (!args)
+		goto ucs_done;
+
+	call = PyEval_CallObject(lib_account_lock, args);
+
+	if ( call == NULL ) {
+		PyErr_Fetch(&errobj, &errdata, &errtraceback);
+		pystring = PyObject_Str(errobj);
+		if ( PyString_Check(pystring) ) {
+			const char *err = PyString_AsString(pystring);
+
+			ucs_error = 1;
+			Debug( LDAP_DEBUG_ANY,
+				"ppolicy udm_lock_account failed: %s\n", err, 0, 0 );
+		}
+	
+	} else {
+		Debug( LDAP_DEBUG_TRACE,
+			"ppolicy udm_lock_account succeeded\n", 0, 0, 0 );
+		ucs_error = 0;
+	}
+
+ucs_done:
+	Py_XDECREF(errobj);
+	Py_XDECREF(errdata);
+	Py_XDECREF(errtraceback);
+	Py_XDECREF(pystring);
+	Py_XDECREF(args);
+	Py_XDECREF(call);
+	Py_XDECREF(lib_account_lock);
+
+	return ucs_error;
+}
+
 static time_t
 parse_time( char *atm )
 {
@@ -987,6 +1051,10 @@ ppolicy_bind_response( Operation *op, Sl
 	if ( rs->sr_err == LDAP_INVALID_CREDENTIALS ) {
 		int i = 0, fc = 0;
 
+		if ((ppb->pp.pwdLockout == 0) || (ppb->pp.pwdMaxFailure == 0)) {
+			goto done;	// Don't write endless pwdFailureTime records if not required.
+		}
+
 		m = ch_calloc( sizeof(Modifications), 1 );
 		m->sml_op = LDAP_MOD_ADD;
 		m->sml_flags = 0;
@@ -1093,6 +1161,8 @@ ppolicy_bind_response( Operation *op, Sl
 			ber_dupbv( &m->sml_nvalues[0], &timestamp );
 			m->sml_next = mod;
 			mod = m;
+
+			udm_lock_account(e, &timestamp);
 		}
 	} else if ( rs->sr_err == LDAP_SUCCESS ) {
 		if ((a = attr_find( e->e_attrs, ad_pwdChangedTime )) != NULL)
@@ -2412,6 +2484,11 @@ ppolicy_db_init(
 
 	ov_count++;
 
+	Py_Initialize();
+	lib_account = PyImport_ImportModule("univention.lib.account");
+
+	ldap_pvt_thread_mutex_init( &chk_syntax_mutex );
+
 	return 0;
 }
 
@@ -2457,6 +2534,10 @@ ppolicy_db_destroy(
 		pwc--;
 		ch_free( pwc );
 	}
+	Py_XDECREF(lib_account);
+	Py_Finalize();
+
+	ldap_pvt_thread_mutex_destroy( &chk_syntax_mutex );
 	return 0;
 }
 
@@ -2493,8 +2574,6 @@ int ppolicy_initialize()
 		return code;
 	}
 
-	ldap_pvt_thread_mutex_init( &chk_syntax_mutex );
-
 	ppolicy.on_bi.bi_type = "ppolicy";
 	ppolicy.on_bi.bi_db_init = ppolicy_db_init;
 	ppolicy.on_bi.bi_db_open = ppolicy_db_open;
